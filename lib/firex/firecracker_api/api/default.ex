# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule Firex.FirecrackerAPI.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias Firex.FirecrackerAPI.Connection
  import Firex.FirecrackerAPI.RequestBuilder

  @doc """
  Creates a full or diff snapshot. Post-boot only.
  Creates a snapshot of the microVM state. The microVM should be in the `Paused` state.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (SnapshotCreateParams): The configuration used for creating a snaphot.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_snapshot(
          Tesla.Env.client(),
          Firex.FirecrackerAPI.Model.SnapshotCreateParams.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def create_snapshot(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/snapshot/create")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Creates a synchronous action.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - info (InstanceActionInfo): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_sync_action(
          Tesla.Env.client(),
          Firex.FirecrackerAPI.Model.InstanceActionInfo.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def create_sync_action(connection, info, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/actions")
    |> add_param(:body, :body, info)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Returns the current balloon device configuration.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Firex.FirecrackerAPI.Model.Balloon.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec describe_balloon_config(Tesla.Env.client(), keyword()) ::
          {:ok, Firex.FirecrackerAPI.Model.Balloon.t()}
          | {:ok, Firex.FirecrackerAPI.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def describe_balloon_config(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/balloon")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Firex.FirecrackerAPI.Model.Balloon{}},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Returns the latest balloon device statistics, only if enabled pre-boot.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Firex.FirecrackerAPI.Model.BalloonStats.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec describe_balloon_stats(Tesla.Env.client(), keyword()) ::
          {:ok, Firex.FirecrackerAPI.Model.BalloonStats.t()}
          | {:ok, Firex.FirecrackerAPI.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def describe_balloon_stats(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/balloon/statistics")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Firex.FirecrackerAPI.Model.BalloonStats{}},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Returns general information about an instance.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Firex.FirecrackerAPI.Model.InstanceInfo.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec describe_instance(Tesla.Env.client(), keyword()) ::
          {:ok, Firex.FirecrackerAPI.Model.InstanceInfo.t()}
          | {:ok, Firex.FirecrackerAPI.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def describe_instance(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Firex.FirecrackerAPI.Model.InstanceInfo{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Gets the full VM configuration.
  Gets configuration for all VM resources.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Firex.FirecrackerAPI.Model.FullVmConfiguration.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_export_vm_config(Tesla.Env.client(), keyword()) ::
          {:ok, Firex.FirecrackerAPI.Model.FullVmConfiguration.t()}
          | {:ok, Firex.FirecrackerAPI.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_export_vm_config(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/vm/config")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Firex.FirecrackerAPI.Model.FullVmConfiguration{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Gets the machine configuration of the VM.
  Gets the machine configuration of the VM. When called before the PUT operation, it will return the default values for the vCPU count (=1), memory size (=128 MiB). By default Hyperthreading is disabled and there is no CPU Template.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, Firex.FirecrackerAPI.Model.MachineConfiguration.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_machine_configuration(Tesla.Env.client(), keyword()) ::
          {:ok, Firex.FirecrackerAPI.Model.MachineConfiguration.t()}
          | {:ok, Firex.FirecrackerAPI.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_machine_configuration(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/machine-config")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, %Firex.FirecrackerAPI.Model.MachineConfiguration{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Loads a snapshot. Pre-boot only.
  Loads the microVM state from a snapshot. Only accepted on a fresh Firecracker process (before configuring any resource other than the Logger and Metrics).

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (SnapshotLoadParams): The configuration used for loading a snaphot.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec load_snapshot(
          Tesla.Env.client(),
          Firex.FirecrackerAPI.Model.SnapshotLoadParams.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def load_snapshot(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/snapshot/load")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Set MMDS configuration. Pre-boot only.
  Creates MMDS configuration to be used by the MMDS network stack.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (MmdsConfig): The MMDS configuration as JSON.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec mmds_config_put(Tesla.Env.client(), Firex.FirecrackerAPI.Model.MmdsConfig.t(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def mmds_config_put(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/mmds/config")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Get the MMDS data store.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec mmds_get(Tesla.Env.client(), keyword()) ::
          {:ok, Map.t()} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def mmds_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/mmds")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {200, false},
      {404, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Updates the MMDS data store.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (map()): The MMDS data store patch JSON.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec mmds_patch(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def mmds_patch(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/mmds")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Creates a MMDS (Microvm Metadata Service) data store.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (map()): The MMDS data store as JSON.
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec mmds_put(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def mmds_put(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/mmds")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Updates a balloon device.
  Updates an existing balloon device, before or after machine startup. Will fail if update is not possible.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (BalloonUpdate): Balloon properties
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_balloon(Tesla.Env.client(), Firex.FirecrackerAPI.Model.BalloonUpdate.t(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def patch_balloon(connection, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/balloon")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Updates a balloon device statistics polling interval.
  Updates an existing balloon device statistics interval, before or after machine startup. Will fail if update is not possible.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (BalloonStatsUpdate): Balloon properties
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_balloon_stats_interval(
          Tesla.Env.client(),
          Firex.FirecrackerAPI.Model.BalloonStatsUpdate.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def patch_balloon_stats_interval(connection, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/balloon/statistics")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Updates the properties of a drive. Post-boot only.
  Updates the properties of the drive with the ID specified by drive_id path parameter. Will fail if update is not possible.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - drive_id (String.t): The id of the guest drive
  - body (PartialDrive): Guest drive properties
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_guest_drive_by_id(
          Tesla.Env.client(),
          String.t(),
          Firex.FirecrackerAPI.Model.PartialDrive.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def patch_guest_drive_by_id(connection, drive_id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/drives/#{drive_id}")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Updates the rate limiters applied to a network interface. Post-boot only.
  Updates the rate limiters applied to a network interface.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - iface_id (String.t): The id of the guest network interface
  - body (PartialNetworkInterface): A subset of the guest network interface properties
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_guest_network_interface_by_id(
          Tesla.Env.client(),
          String.t(),
          Firex.FirecrackerAPI.Model.PartialNetworkInterface.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def patch_guest_network_interface_by_id(connection, iface_id, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/network-interfaces/#{iface_id}")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Partially updates the Machine Configuration of the VM. Pre-boot only.
  Partially updates the Virtual Machine Configuration with the specified input. If any of the parameters has an incorrect value, the whole update fails.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (MachineConfiguration): A subset of Machine Configuration Parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_machine_configuration(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def patch_machine_configuration(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/machine-config")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Updates the microVM state.
  Sets the desired state (Paused or Resumed) for the microVM.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (Vm): The microVM state
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_vm(Tesla.Env.client(), Firex.FirecrackerAPI.Model.Vm.t(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def patch_vm(connection, body, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/vm")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Creates or updates a balloon device.
  Creates a new balloon device if one does not already exist, otherwise updates it, before machine startup. This will fail after machine startup. Will fail if update is not possible.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (Balloon): Balloon properties
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_balloon(Tesla.Env.client(), Firex.FirecrackerAPI.Model.Balloon.t(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def put_balloon(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/balloon")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Creates or updates the boot source. Pre-boot only.
  Creates new boot source if one does not already exist, otherwise updates it. Will fail if update is not possible.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (BootSource): Guest boot source properties
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_guest_boot_source(
          Tesla.Env.client(),
          Firex.FirecrackerAPI.Model.BootSource.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def put_guest_boot_source(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/boot-source")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Creates or updates a drive. Pre-boot only.
  Creates new drive with ID specified by drive_id path parameter. If a drive with the specified ID already exists, updates its state based on new input. Will fail if update is not possible.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - drive_id (String.t): The id of the guest drive
  - body (Drive): Guest drive properties
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_guest_drive_by_id(
          Tesla.Env.client(),
          String.t(),
          Firex.FirecrackerAPI.Model.Drive.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def put_guest_drive_by_id(connection, drive_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/drives/#{drive_id}")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Creates a network interface. Pre-boot only.
  Creates new network interface with ID specified by iface_id path parameter.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - iface_id (String.t): The id of the guest network interface
  - body (NetworkInterface): Guest network interface properties
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_guest_network_interface_by_id(
          Tesla.Env.client(),
          String.t(),
          Firex.FirecrackerAPI.Model.NetworkInterface.t(),
          keyword()
        ) :: {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def put_guest_network_interface_by_id(connection, iface_id, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/network-interfaces/#{iface_id}")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Creates/updates a vsock device. Pre-boot only.
  The first call creates the device with the configuration specified in body. Subsequent calls will update the device configuration. May fail if update is not possible.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (Vsock): Guest vsock properties
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_guest_vsock(Tesla.Env.client(), Firex.FirecrackerAPI.Model.Vsock.t(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def put_guest_vsock(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/vsock")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Initializes the logger by specifying a named pipe or a file for the logs output.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (Logger): Logging system description
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_logger(Tesla.Env.client(), Firex.FirecrackerAPI.Model.Logger.t(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def put_logger(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/logger")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Updates the Machine Configuration of the VM. Pre-boot only.
  Updates the Virtual Machine Configuration with the specified input. Firecracker starts with default values for vCPU count (=1) and memory size (=128 MiB). With Hyperthreading enabled, the vCPU count is restricted to be 1 or an even number, otherwise there are no restrictions regarding the vCPU count. If any of the parameters has an incorrect value, the whole update fails.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (MachineConfiguration): Machine Configuration Parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_machine_configuration(Tesla.Env.client(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def put_machine_configuration(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/machine-config")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end

  @doc """
  Initializes the metrics system by specifying a named pipe or a file for the metrics output.

  ## Parameters

  - connection (Firex.FirecrackerAPI.Connection): Connection to server
  - body (Metrics): Metrics system description
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_metrics(Tesla.Env.client(), Firex.FirecrackerAPI.Model.Metrics.t(), keyword()) ::
          {:ok, nil} | {:ok, Firex.FirecrackerAPI.Model.Error.t()} | {:error, Tesla.Env.t()}
  def put_metrics(connection, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/metrics")
    |> add_param(:body, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      {204, false},
      {400, %Firex.FirecrackerAPI.Model.Error{}},
      {:default, %Firex.FirecrackerAPI.Model.Error{}}
    ])
  end
end
